/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var TsGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,19],$V2=[1,20],$V3=[1,8],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,26],$Vd=[1,25],$Ve=[1,29],$Vf=[1,30],$Vg=[2,5,20,21,22,25,28,34,37,38,39,40,82,84,85,86,91,92,93],$Vh=[2,5],$Vi=[1,33],$Vj=[1,58],$Vk=[1,59],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,54],$Vq=[1,45],$Vr=[1,50],$Vs=[1,52],$Vt=[1,53],$Vu=[1,55],$Vv=[1,56],$Vw=[2,5,7,16,20,21,22,25,28,34,35,37,38,39,40,43,45,82,84,85,86,91,92,93],$Vx=[2,5,7,13,19,20,21,22,25,28,34,36,37,38,39,40,44,82,84,85,86,91,92,93],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[1,97],$VP=[2,5,7,13,19,20,21,22,25,28,34,36,37,38,39,40,44,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,82,84,85,86,91,92,93],$VQ=[2,5,7,13,16,19,20,21,22,25,28,34,35,36,37,38,39,40,43,44,45,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,82,84,85,86,91,92,93],$VR=[1,117],$VS=[2,7],$VT=[1,131],$VU=[19,36],$VV=[19,44],$VW=[2,5,7,13,19,20,21,22,25,28,34,36,37,38,39,40,44,58,59,60,62,63,64,65,66,67,68,69,70,71,82,84,85,86,91,92,93],$VX=[2,5,7,19,20,21,22,25,28,34,37,38,39,40,82,84,85,86,91,92,93],$VY=[2,16],$VZ=[1,168],$V_=[1,174],$V$=[1,170],$V01=[1,171],$V11=[1,172],$V21=[1,173],$V31=[25,91,92],$V41=[2,5,7,13,19,20,21,22,25,28,34,36,37,38,39,40,44,58,59,60,62,63,64,65,82,84,85,86,91,92,93],$V51=[2,5,7,13,19,20,21,22,25,28,34,36,37,38,39,40,44,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,82,84,85,86,91,92,93],$V61=[2,5,7,16,19,20,21,22,24,25,28,34,36,37,38,39,40,82,84,85,86,91,92,93],$V71=[2,52],$V81=[1,203],$V91=[2,131],$Va1=[2,5,7,20,21,22,25,28,34,37,38,39,40,82,84,85,86,91,92,93],$Vb1=[19,25],$Vc1=[1,242],$Vd1=[1,243],$Ve1=[2,5,7,16,19,20,21,22,24,25,28,34,36,37,38,39,40,43,82,84,85,86,91,92,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"InitMain":3,"BodyList":4,"endOfFile":5,"SemicolonE":6,"semicolon":7,"FunctionBody":8,"RightFunctionBody":9,"RightBodyList":10,"BodyElement":11,"TypeAttribute":12,"colon":13,"VariableType":14,"VariableExpression":15,"equal":16,"Expression":17,"VariableDec":18,"comma":19,"id":20,"let":21,"const":22,"ObjectList":23,"leftCrlBrkt":24,"rightCrlBrkt":25,"ObjectAttList":26,"IdCall":27,"type":28,"IfStatement":29,"WhileStatement":30,"DoWhileStatement":31,"ForStatement":32,"SwitchStatement":33,"print":34,"leftPar":35,"rightPar":36,"break":37,"return":38,"continue":39,"function":40,"FunctionparameterListOrEmpty":41,"ParameterList":42,"leftSqrBrkt":43,"rightSqrBrkt":44,"dot":45,"increase":46,"decrease":47,"FunctionparameterList":48,"SizeList_":49,"SizeList":50,"number":51,"string":52,"void":53,"boolean":54,"ObjectStrc":55,"ObjectStrcList":56,"ExpressionOp":57,"questionMark":58,"or":59,"and":60,"not":61,"equality":62,"inequality":63,"equality2":64,"inequality2":65,"lessThan":66,"greaterThan":67,"lessEqual":68,"greaterEqual":69,"plus":70,"minus":71,"times":72,"divide":73,"module":74,"power":75,"ExpressionList":76,"IdAssign":77,"true":78,"false":79,"strng":80,"null":81,"if":82,"else":83,"while":84,"do":85,"switch":86,"CaseStatementList_":87,"CaseStatementList":88,"CaseStatement":89,"DefaultStatement":90,"case":91,"default":92,"for":93,"ForDecOr":94,"ExpOr":95,"in":96,"of":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"endOfFile",7:"semicolon",13:"colon",16:"equal",19:"comma",20:"id",21:"let",22:"const",24:"leftCrlBrkt",25:"rightCrlBrkt",28:"type",34:"print",35:"leftPar",36:"rightPar",37:"break",38:"return",39:"continue",40:"function",43:"leftSqrBrkt",44:"rightSqrBrkt",45:"dot",46:"increase",47:"decrease",51:"number",52:"string",53:"void",54:"boolean",58:"questionMark",59:"or",60:"and",61:"not",62:"equality",63:"inequality",64:"equality2",65:"inequality2",66:"lessThan",67:"greaterThan",68:"lessEqual",69:"greaterEqual",70:"plus",71:"minus",72:"times",73:"divide",74:"module",75:"power",78:"true",79:"false",80:"strng",81:"null",82:"if",83:"else",84:"while",85:"do",86:"switch",91:"case",92:"default",93:"for",96:"in",97:"of"},
productions_: [0,[3,2],[3,1],[3,1],[6,1],[6,0],[8,1],[8,0],[9,1],[9,0],[10,1],[10,2],[4,2],[4,1],[12,2],[15,2],[15,0],[18,5],[18,4],[18,4],[23,2],[23,3],[26,5],[26,3],[11,2],[11,2],[11,4],[11,5],[11,1],[11,1],[11,1],[11,1],[11,1],[11,5],[11,2],[11,3],[11,2],[11,2],[11,9],[11,2],[27,3],[27,4],[27,4],[27,3],[27,1],[27,2],[27,2],[41,1],[41,0],[48,5],[48,3],[49,1],[49,0],[50,3],[50,2],[14,2],[14,2],[14,1],[14,2],[14,2],[55,3],[55,2],[56,5],[56,3],[17,1],[57,5],[57,3],[57,3],[57,2],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,2],[57,2],[57,2],[57,3],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,2],[57,1],[76,3],[76,1],[77,4],[77,3],[77,3],[77,4],[77,1],[77,2],[77,2],[42,3],[42,1],[29,7],[29,9],[29,11],[30,7],[31,9],[33,7],[87,1],[87,0],[88,2],[88,2],[88,1],[88,1],[89,4],[90,3],[32,11],[32,10],[32,10],[32,10],[32,10],[94,4],[94,3],[94,0],[95,1],[95,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log($$[$0-1]); return new MainScope($$[$0-1]);
break;
case 2:
return new MainScope(new Array());
break;
case 3:

            ErrorList = ErrorList.concat({
            type : 'Sintactico',
            description : $$[$0],
            line : _$[$0].first_line, 
            column : _$[$0].first_column});
        
break;
case 6:
this.$ = new Body($$[$0]);
break;
case 7:
this.$ = new Body(new Array());
break;
case 12: case 116: case 117:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 13: case 107:
this.$ = new Array($$[$0]);
break;
case 14: case 15:
this.$ = $$[$0];
break;
case 16:
this.$ = undefined;
break;
case 18: case 127:
this.$ = new CreateVariable($$[$0-2], $$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column )
break;
case 20:
this.$ = new Array();
break;
case 21: case 83:
this.$ = $$[$0-1];
break;
case 22:
this.$ = $$[$0-4].concat(new CreateVariable($$[$0-2], $$[$0], undefined, _$[$0-4].first_line, _$[$0-4].first_column ));
break;
case 23:
this.$ = [new CreateVariable($$[$0-2], $$[$0], undefined, _$[$0-2].first_line, _$[$0-2].first_column )];
break;
case 26:
this.$ = new AssignVariable($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 27:
this.$ = new ObjectClass($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 33:
this.$ = new PrintSttmnt($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 34:
 this.$ = new BreakSttmnt(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 35:
this.$ = new ReturnSttmnt($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 36:
this.$ = new ReturnSttmnt(undefined, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 37:
 this.$ = new ContinueSttmnt(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 38:
this.$ = new Function ($$[$0-3], $$[$0-7], $$[$0-5], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column );
break;
case 39:

                        ErrorList = ErrorList.concat({
                        type : 'Sintactico',
                        description : $$[$0-1],
                        line : _$[$0-1].first_line, 
                        column : _$[$0-1].first_column});
                        this.$ = new Symbol();
        
break;
case 40: case 101:
this.$ = new Call($$[$0-2], new Array(), _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 41: case 102:
this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 42: case 99:
this.$ = new VectorialAccess($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 44: case 103:
this.$ = new GetId ($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 45: case 104:
this.$ = new PostIncrease(new GetId ($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 46: case 105:
this.$ = new PostDecrease(new GetId ($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 48:
 this.$ = new Array(); 
break;
case 49:
 let list = $$[$0-4]; list.push({ type : $$[$0], name : $$[$0-2] }); this.$ = list; 
break;
case 50:
 this.$ = new Array({ type : $$[$0], name : $$[$0-2] }); 
break;
case 52:
this.$ = '';
break;
case 53:
this.$ = $$[$0-2] + '[]';
break;
case 54:
this.$ = '[]';
break;
case 55: case 56: case 58: case 59:
this.$ = $$[$0-1] + $$[$0];
break;
case 57:
this.$ = $$[$0] + $$[$01];
break;
case 64:
this.$ = new Expression($$[$0]);
break;
case 65:
this.$ = new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 66:
this.$ = new OrOp($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 67:
this.$ = new AndOp($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
this.$ = new Not($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76:
this.$ = new RelationalExpression($$[$0-1], $$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 77:
this.$ = new Addition($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$ = new Subtraction($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
this.$ = new Times($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$ = new Divide($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
this.$ = new Module($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$ = new Power($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 84:
this.$ = new ArrayClass($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 85:
this.$ = new PreIncrease(new GetId ($$[$0], _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 86:
this.$ = new PreDecrease(new GetId ($$[$0], _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 87:
this.$ = new Unary($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 88:
this.$ = new AssignVariable($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$ = new Symbol('boolean', 1,              _$[$0].first_line, _$[$0].first_column);
break;
case 91:
this.$ = new Symbol('boolean', 0,              _$[$0].first_line, _$[$0].first_column);
break;
case 92:
this.$ = new Symbol('number',  parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 93:
this.$ = new Symbol('string',  $$[$0],             _$[$0].first_line, _$[$0].first_column);
break;
case 94:
this.$ = new Symbol();
break;
case 97: case 106:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 98: case 118: case 119:
this.$ = [$$[$0]];
break;
case 108:
 this.$ = new IfSttmnt($$[$0-4], $$[$0-1], undefined, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 109:
 this.$ = new IfSttmnt($$[$0-6], $$[$0-3], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 110:
 this.$ = new IfSttmnt($$[$0-8], $$[$0-5], new IfSttmnt(undefined, $$[$0-1], undefined, _$[$0-3].first_line, _$[$0-3].first_column), _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 111:
 this.$ = new WhileSttmnt($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 112:
 this.$ = new DoWhileSttmnt($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 113:
this.$ = new SwitchSttmnt($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 115:
this.$ = new Body([]);
break;
case 120:
this.$ = new CaseSttmnt($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 121:
this.$ = new CaseSttmnt(undefined, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 122:
this.$ = new ForSttmnt($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 128:
this.$ = new AssignVariable(new GetId ($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
}
},
table: [{2:[1,4],3:1,4:2,5:[1,3],11:5,18:6,20:$V0,21:$V1,22:$V2,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{1:[3]},{2:$Ve,5:[1,27],11:28,18:6,20:$V0,21:$V1,22:$V2,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{1:[2,2]},{1:[2,3],7:$Vf},o($Vg,[2,13]),o($Vg,$Vh,{6:31,7:$Vi,19:[1,32]}),o($Vg,$Vh,{6:34,7:$Vi,16:[1,35],35:[1,36],43:[1,37],45:[1,38]}),{20:[1,39]},o($Vg,[2,28]),o($Vg,[2,29]),o($Vg,[2,30]),o($Vg,[2,31]),o($Vg,[2,32]),{35:[1,40]},o($Vg,$Vh,{6:41,7:$Vi}),{7:[1,43],17:42,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o($Vg,$Vh,{6:60,7:$Vi}),{20:[1,61]},{20:[1,62]},{20:[1,63]},o($Vw,[2,44],{46:[1,64],47:[1,65]}),{35:[1,66]},{35:[1,67]},{24:[1,68]},{35:[1,69]},{35:[1,70]},{1:[2,1]},o($Vg,[2,12]),{7:$Vf},o($Vg,[2,39]),o($Vg,[2,24]),{20:[1,71]},o($Vg,[2,4]),o($Vg,[2,25]),{17:72,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{17:75,20:$Vj,24:$Vk,35:$Vl,36:[1,73],42:74,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{17:76,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:[1,77]},{16:[1,78]},{17:79,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o($Vg,[2,34]),o($Vg,$Vh,{6:80,7:$Vi}),o($Vg,[2,36]),o($Vx,[2,64],{58:$Vy,59:$Vz,60:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:98,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:99,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{17:102,20:$Vj,24:$Vk,35:$Vl,43:$Vm,44:[1,101],46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,76:100,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:[1,103]},{20:[1,104]},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:105,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o($VP,[2,89],{16:[1,106],35:[1,109],43:[1,107],45:[1,108]}),o($VP,[2,90]),o($VP,[2,91]),o($VP,[2,92]),o($VP,[2,93]),o($VP,[2,94]),o($VP,[2,96]),o($VQ,[2,103],{46:[1,110],47:[1,111]}),{20:[1,114],25:[1,113],56:112},o($Vg,[2,37]),{35:[1,115]},{12:116,13:$VR},{12:118,13:$VR},o($Vw,[2,45]),o($Vw,[2,46]),{17:119,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{17:120,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{2:$Ve,4:122,8:121,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{7:[2,129],20:[1,126],21:[1,124],22:[1,125],94:123},{17:127,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{12:128,13:$VR},o($Vg,$Vh,{6:129,7:$Vi}),o($Vw,[2,40]),{19:$VT,36:[1,130]},o($VU,[2,107]),{44:[1,132]},o($Vw,[2,43]),{23:133,24:[1,134]},{36:[1,135]},o($Vg,[2,35]),{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:136,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:137,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:138,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:139,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:140,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:141,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:142,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:143,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:144,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:145,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:146,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:147,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:148,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:149,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:150,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:151,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:152,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o($VP,[2,68]),{36:[1,153],58:$Vy,59:$Vz,60:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO},{19:[1,155],44:[1,154]},o($VP,[2,95]),o($VV,[2,98]),o($VP,[2,85]),o($VP,[2,86]),o($VW,[2,87],{72:$VL,73:$VM,74:$VN,75:$VO}),{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:156,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{17:157,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{20:[1,158]},{17:75,20:$Vj,24:$Vk,35:$Vl,36:[1,159],42:160,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o($VQ,[2,104]),o($VQ,[2,105]),{19:[1,162],25:[1,161]},o($VP,[2,61]),{13:[1,163]},{20:[1,166],36:[2,48],41:164,48:165},o($VX,$VY,{15:167,16:$VZ}),{14:169,20:$V_,51:$V$,52:$V01,53:$V11,54:$V21},o($VX,$VY,{15:175,16:$VZ}),{36:[1,176]},{36:[1,177]},{25:[1,178]},o($V31,[2,6],{18:6,27:7,29:9,30:10,31:11,32:12,33:13,11:28,2:$Ve,20:$V0,21:$V1,22:$V2,28:$V3,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd}),{7:[1,179]},{20:[1,180]},{20:[1,181]},{16:[1,182]},{36:[1,183]},o($VX,$VY,{15:184,16:$VZ}),o($Vg,[2,26]),o($Vw,[2,41]),{17:185,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o($Vw,[2,42]),o($Vg,$Vh,{6:186,7:$Vi}),{20:[1,189],25:[1,187],26:188},o($Vg,$Vh,{6:190,7:$Vi}),{13:[1,191],58:$Vy,59:$Vz,60:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO},o([2,5,7,13,19,20,21,22,25,28,34,36,37,38,39,40,44,58,59,82,84,85,86,91,92,93],[2,66],{60:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o([2,5,7,13,19,20,21,22,25,28,34,36,37,38,39,40,44,58,59,60,82,84,85,86,91,92,93],[2,67],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V41,[2,69],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V41,[2,70],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V41,[2,71],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V41,[2,72],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V41,[2,73],{70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V41,[2,74],{70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V41,[2,75],{70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($V41,[2,76],{70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($VW,[2,77],{72:$VL,73:$VM,74:$VN,75:$VO}),o($VW,[2,78],{72:$VL,73:$VM,74:$VN,75:$VO}),o($V51,[2,79],{75:$VO}),o($V51,[2,80],{75:$VO}),o($V51,[2,81],{75:$VO}),o($VP,[2,82]),o($VP,[2,83]),o($VP,[2,84]),{17:192,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o($Vx,[2,88],{58:$Vy,59:$Vz,60:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),{44:[1,193]},o($VQ,[2,100]),o($VQ,[2,101]),{19:$VT,36:[1,194]},o($VP,[2,60]),{20:[1,195]},{17:196,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{36:[1,197]},{19:[1,198],36:[2,47]},{13:[1,199]},o($VX,[2,18]),{17:200,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o([2,5,7,16,19,20,21,22,24,25,28,34,37,38,39,40,82,84,85,86,91,92,93],[2,14]),o($V61,$V71,{49:201,50:202,43:$V81}),o($V61,$V71,{50:202,49:204,43:$V81}),o($V61,[2,57]),o($V61,$V71,{50:202,49:205,43:$V81}),o($V61,$V71,{50:202,49:206,43:$V81}),o($VX,[2,19]),{24:[1,207]},{24:[1,208]},{84:[1,209]},{7:$V91,17:211,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv,95:210},{12:214,13:$VR,96:[1,212],97:[1,213]},{96:[1,215],97:[1,216]},{17:217,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{24:[1,218]},o($VX,[2,17]),o($VU,[2,106]),o($Vg,[2,27]),o($Va1,[2,20]),{19:[1,220],25:[1,219]},{13:[1,221]},o($Vg,[2,33]),{20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:222,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},o($VV,[2,97]),o($VQ,[2,99]),o($VQ,[2,102]),{13:[1,223]},o($Vb1,[2,63]),{12:224,13:$VR},{20:[1,225]},{14:226,20:$V_,51:$V$,52:$V01,53:$V11,54:$V21},o($VX,[2,15]),o($V61,[2,55]),o($V61,[2,51],{43:[1,227]}),{44:[1,228]},o($V61,[2,56]),o($V61,[2,58]),o($V61,[2,59]),{2:$Ve,4:122,8:229,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{2:$Ve,4:122,8:230,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{35:[1,231]},{7:[1,232]},o([7,36],[2,130]),{17:233,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{17:234,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{7:$VY,15:235,16:$VZ},{17:236,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{17:237,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{7:[2,128]},{25:[2,115],87:238,88:239,89:240,90:241,91:$Vc1,92:$Vd1},o($Va1,[2,21]),{20:[1,244]},{14:245,20:$V_,51:$V$,52:$V01,53:$V11,54:$V21},o($Vx,[2,65],{58:$Vy,59:$Vz,60:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),{17:246,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{24:[1,247]},{13:[1,248]},o($VU,[2,50]),{44:[1,249]},o($Ve1,[2,54]),{25:[1,250]},{25:[1,251]},{17:252,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{17:211,20:$Vj,24:$Vk,35:$Vl,36:$V91,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv,95:253},{36:[1,254]},{36:[1,255]},{7:[2,127]},{36:[1,256]},{36:[1,257]},{25:[1,258]},{25:[2,114],89:259,90:260,91:$Vc1,92:$Vd1},o($V31,[2,118]),o($V31,[2,119]),{17:261,20:$Vj,24:$Vk,35:$Vl,43:$Vm,46:$Vn,47:$Vo,51:$Vp,55:57,57:44,61:$Vq,71:$Vr,77:51,78:$Vs,79:$Vt,80:$Vu,81:$Vv},{13:[1,262]},{13:[1,263]},o($Vb1,[2,23]),o($Vb1,[2,62]),{2:$Ve,4:122,8:264,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{14:265,20:$V_,51:$V$,52:$V01,53:$V11,54:$V21},o($Ve1,[2,53]),o($Vg,[2,108],{83:[1,266]}),o($Vg,[2,111]),{36:[1,267]},{36:[1,268]},{24:[1,269]},{24:[1,270]},{24:[1,271]},{24:[1,272]},o($Vg,[2,113]),o($V31,[2,116]),o($V31,[2,117]),{13:[1,273]},o($V31,$VS,{11:5,18:6,27:7,29:9,30:10,31:11,32:12,33:13,4:122,8:274,2:$Ve,20:$V0,21:$V1,22:$V2,28:$V3,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd}),{14:275,20:$V_,51:$V$,52:$V01,53:$V11,54:$V21},{25:[1,276]},o($VU,[2,49]),{24:[1,278],29:277,82:$V9},o($Vg,$Vh,{6:279,7:$Vi}),{24:[1,280]},{2:$Ve,4:122,8:281,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{2:$Ve,4:122,8:282,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{2:$Ve,4:122,8:283,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{2:$Ve,4:122,8:284,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},o($V31,$VS,{11:5,18:6,27:7,29:9,30:10,31:11,32:12,33:13,4:122,8:285,2:$Ve,20:$V0,21:$V1,22:$V2,28:$V3,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd}),o($V31,[2,121]),o($Vb1,[2,22]),o($Vg,[2,38]),o($Vg,[2,109]),{2:$Ve,4:122,8:286,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},o($Vg,[2,112]),{2:$Ve,4:122,8:287,11:5,18:6,20:$V0,21:$V1,22:$V2,25:$VS,27:7,28:$V3,29:9,30:10,31:11,32:12,33:13,34:$V4,37:$V5,38:$V6,39:$V7,40:$V8,82:$V9,84:$Va,85:$Vb,86:$Vc,93:$Vd},{25:[1,288]},{25:[1,289]},{25:[1,290]},{25:[1,291]},o($V31,[2,120]),{25:[1,292]},{25:[1,293]},o($Vg,[2,123]),o($Vg,[2,125]),o($Vg,[2,124]),o($Vg,[2,126]),o($Vg,[2,110]),o($Vg,[2,122])],
defaultActions: {3:[2,2],27:[2,1],217:[2,128],235:[2,127]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};



   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:return 58;
break;
case 5:return 59;
break;
case 6:return 60;
break;
case 7:return 62;
break;
case 8:return 63;
break;
case 9:return 64;
break;
case 10:return 65;
break;
case 11:return 61;
break;
case 12:return 69;
break;
case 13:return 68;
break;
case 14:return 67;
break;
case 15:return 66;
break;
case 16:return 46;
break;
case 17:return 47;
break;
case 18:return 70;
break;
case 19:return 71;
break;
case 20:return 75;
break;
case 21:return 72;
break;
case 22:return 73;
break;
case 23:return 74;
break;
case 24:return 81
break;
case 25:return 24;
break;
case 26:return 25;
break;
case 27:return 43;
break;
case 28:return 44;
break;
case 29:return 'instanceof';
break;
case 30:return 'new';
break;
case 31:return 81;
break;
case 32:return 96;
break;
case 33:return 97;
break;
case 34:return 51;
break;
case 35:return 52;
break;
case 36:return 54;
break;
case 37:return 22;
break;
case 38:return 21;
break;
case 39:return 82;
break;
case 40:return 83;
break;
case 41:return 86;
break;
case 42:return 91;
break;
case 43:return 92;
break;
case 44:return 37;
break;
case 45:return 53;
break;
case 46:return 28;
break;
case 47:return 40;
break;
case 48:return 39;
break;
case 49:return 38;
break;
case 50:return 34;
break;
case 51:return 'GraficarTs';
break;
case 52:return 93;
break;
case 53:return 84;
break;
case 54:return 85
break;
case 55:return 16;
break;
case 56:return 13;
break;
case 57:return 7;
break;
case 58:return 19;
break;
case 59:return 45;
break;
case 60:return 35;
break;
case 61:return 36;
break;
case 62:return 51;
break;
case 63:/*"*/  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80
break;
case 64:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80
break;
case 65:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80
break;
case 66:return 78;
break;
case 67:return 79;
break;
case 68:return 20;
break;
case 69:/* skip whitespace */
break;
case 70:
                                ErrorList = ErrorList.concat({
                                type : 'Lexico',
                                description :  yy_.yytext,
                                line :yy_.yylloc.first_line, 
                                column : yy_.yylloc.first_column});
                            
break;
case 71:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:null\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:instanceof\b)/,/^(?:new\b)/,/^(?:null\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:function\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\.log\b)/,/^(?:Graficar_ts\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:"(?:\\[\\"bfnrt/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/,/^(?:([']([^'\\\n]|\\(.|\n))*[']))/,/^(?:([`]([^'\\\n]|\\(.|\n))*[`]))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9ñÑ]*))/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = TsGrammar;
exports.Parser = TsGrammar.Parser;
exports.parse = function () { return TsGrammar.parse.apply(TsGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}