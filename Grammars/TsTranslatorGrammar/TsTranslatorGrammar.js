/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var TsTranslatorGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,17],$V2=[1,18],$V3=[1,7],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,24],$Vc=[1,23],$Vd=[5,20,21,22,25,28,34,35,36,37,79,81,82,83,88,89,90],$Ve=[2,4],$Vf=[1,29],$Vg=[1,28],$Vh=[1,53],$Vi=[1,54],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,49],$Vo=[1,40],$Vp=[1,45],$Vq=[1,47],$Vr=[1,48],$Vs=[1,50],$Vt=[1,51],$Vu=[5,7,16,20,21,22,25,28,34,35,36,37,38,42,44,79,81,82,83,88,89,90],$Vv=[5,7,13,19,20,21,22,25,28,34,35,36,37,40,43,79,81,82,83,88,89,90],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[5,7,13,19,20,21,22,25,28,34,35,36,37,40,43,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,79,81,82,83,88,89,90],$VM=[5,7,13,16,19,20,21,22,25,28,34,35,36,37,38,40,42,43,44,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,79,81,82,83,88,89,90],$VN=[5,7,16,19,20,21,22,25,28,34,35,36,37,79,81,82,83,88,89,90],$VO=[2,14],$VP=[1,109],$VQ=[2,6],$VR=[1,123],$VS=[19,40],$VT=[19,43],$VU=[5,7,13,19,20,21,22,25,28,34,35,36,37,40,43,57,58,59,61,62,63,64,65,66,67,68,72,79,81,82,83,88,89,90],$VV=[5,7,19,20,21,22,25,28,34,35,36,37,79,81,82,83,88,89,90],$VW=[2,16],$VX=[1,157],$VY=[1,163],$VZ=[1,159],$V_=[1,160],$V$=[1,161],$V01=[1,162],$V11=[25,88,89],$V21=[5,7,13,19,20,21,22,25,28,34,35,36,37,40,43,57,58,59,61,62,72,79,81,82,83,88,89,90],$V31=[5,7,16,19,20,21,22,24,25,28,34,35,36,37,40,79,81,82,83,88,89,90],$V41=[2,55],$V51=[1,190],$V61=[2,126],$V71=[7,16,19],$V81=[5,7,20,21,22,25,28,34,35,36,37,79,81,82,83,88,89,90],$V91=[19,25],$Va1=[1,226],$Vb1=[1,227],$Vc1=[5,7,16,19,20,21,22,24,25,28,34,35,36,37,40,42,79,81,82,83,88,89,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"InitMain":3,"BodyList":4,"endOfFile":5,"SemicolonE":6,"semicolon":7,"FunctionBody":8,"RightFunctionBody":9,"RightBodyList":10,"BodyElement":11,"TypeAttribute":12,"colon":13,"VariableType":14,"VariableExpression":15,"equal":16,"Expression":17,"VariableDec":18,"comma":19,"id":20,"let":21,"const":22,"ObjectList":23,"leftCrlBrkt":24,"rightCrlBrkt":25,"ObjectAttList":26,"IdCall":27,"type":28,"IfStatement":29,"WhileStatement":30,"DoWhileStatement":31,"ForStatement":32,"SwitchStatement":33,"break":34,"return":35,"continue":36,"function":37,"leftPar":38,"FunctionparameterListOrEmpty":39,"rightPar":40,"ParameterList":41,"leftSqrBrkt":42,"rightSqrBrkt":43,"dot":44,"increase":45,"decrease":46,"FunctionparameterList":47,"number":48,"SizeList_":49,"string":50,"void":51,"boolean":52,"SizeList":53,"ObjectStrc":54,"ObjectStrcList":55,"ExpressionOp":56,"questionMark":57,"or":58,"and":59,"not":60,"equality":61,"inequality":62,"lessThan":63,"greaterThan":64,"lessEqual":65,"greaterEqual":66,"plus":67,"minus":68,"times":69,"divide":70,"module":71,"power":72,"ExpressionList":73,"IdAssign":74,"true":75,"false":76,"strng":77,"null":78,"if":79,"else":80,"while":81,"do":82,"switch":83,"CaseStatementList_":84,"CaseStatementList":85,"CaseStatement":86,"DefaultStatement":87,"case":88,"default":89,"for":90,"ForDecOr":91,"ExpOr":92,"in":93,"of":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"endOfFile",7:"semicolon",13:"colon",16:"equal",19:"comma",20:"id",21:"let",22:"const",24:"leftCrlBrkt",25:"rightCrlBrkt",28:"type",34:"break",35:"return",36:"continue",37:"function",38:"leftPar",40:"rightPar",42:"leftSqrBrkt",43:"rightSqrBrkt",44:"dot",45:"increase",46:"decrease",48:"number",50:"string",51:"void",52:"boolean",57:"questionMark",58:"or",59:"and",60:"not",61:"equality",62:"inequality",63:"lessThan",64:"greaterThan",65:"lessEqual",66:"greaterEqual",67:"plus",68:"minus",69:"times",70:"divide",71:"module",72:"power",75:"true",76:"false",77:"strng",78:"null",79:"if",80:"else",81:"while",82:"do",83:"switch",88:"case",89:"default",90:"for",93:"in",94:"of"},
productions_: [0,[3,2],[3,1],[6,1],[6,0],[8,1],[8,0],[9,1],[9,0],[10,1],[10,2],[4,2],[4,1],[12,2],[12,0],[15,2],[15,0],[18,5],[18,4],[18,4],[23,2],[23,3],[26,5],[26,3],[11,2],[11,2],[11,4],[11,5],[11,1],[11,1],[11,1],[11,1],[11,1],[11,2],[11,3],[11,2],[11,2],[11,9],[27,3],[27,4],[27,4],[27,3],[27,1],[27,2],[27,2],[39,1],[39,0],[47,5],[47,3],[14,2],[14,2],[14,1],[14,2],[14,2],[49,1],[49,0],[53,3],[53,2],[54,3],[54,2],[55,5],[55,3],[17,1],[56,5],[56,3],[56,3],[56,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,2],[56,2],[56,2],[56,3],[56,1],[56,2],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[73,3],[73,1],[74,4],[74,3],[74,3],[74,4],[74,1],[74,2],[74,2],[41,3],[41,1],[29,7],[29,9],[29,11],[30,7],[31,9],[33,7],[84,1],[84,0],[85,2],[85,2],[85,1],[85,1],[86,4],[87,3],[32,11],[32,10],[32,10],[32,10],[32,10],[91,1],[91,0],[92,1],[92,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            $$[$0-1][0].parent = getIndex(0)
            this.$ = [{ key: newIndex(), text: "InitMain", fill: "#f68c06", stroke: "#4d90fe", parent : -1 }].concat($$[$0-1])
            this.$ = this.$.concat({ key: newIndex(), text: "EndOfFile", fill: "#f68c06", stroke: "#4d90fe", parent: getIndex(-2) })
            return this.$;
        
break;
case 2:

            return [{ key: newIndex(), text: "InitMain", fill: "#f68c06", stroke: "#4d90fe" },
               { key: newIndex(), text: "EndOfFile", fill: "#f68c06", stroke: "#4d90fe", parent: getIndex(-2) }, 
            ];
        
break;
case 3: case 7:
this.$ = $$[$0];
break;
case 9:

        $$[$0][0].parent = getIndex(0);
        this.$ = [
            { key: newIndex(), text: "RBodyList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 }
        ].concat($$[$0]);

    
break;
case 10:

        $$[$0-1][0].parent = getIndex(0);
        $$[$0][0].parent = getIndex(0);
        this.$ = [
            { key: newIndex(), text: "RBodyList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 }
        ]
        .concat($$[$0-1])
        .concat($$[$0])

    
break;
case 11:

            $$[$0-1][0].parent = getIndex(0);
            $$[$0][0].parent = getIndex(0);
            this.$ = [
                { key: newIndex(), text: "BodyList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 }
            ];

            this.$ = this.$.concat($$[$0-1]);
            this.$ = this.$.concat($$[$0]);
        
break;
case 12:

            $$[$0][0].parent = getIndex(0);
            this.$ = [
                { key: newIndex(), text: "BodyList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 }
            ].concat($$[$0]);

        
break;
case 13:

            this.$ = [
                    
                { key: newIndex(), text: "TypeAttribute", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
                { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) }
                    
            ];
        
break;
case 15:

        $$[$0][0].parent = getIndex(0);

        this.$ = [

                { key: newIndex(), text: "VariableExpression", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) }
        ].concat($$[$0]);
    
break;
case 17:

            
        $$[$0-4][0].parent = getIndex(0);
        $$[$0-1][0].parent = getIndex(0);
        $$[$0][0].parent = getIndex(0);
        
        this.$ = [

                { key: newIndex(), text: "VariableDec", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
                { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]


        this.$ = this.$.concat($$[$0-4])
        this.$ = this.$.concat($$[$0-1])
        this.$ = this.$.concat($$[$0])
            
    
break;
case 18:

        
        if($$[$0-1]) $$[$0-1][0].parent = getIndex(0);
        if($$[$0]) $$[$0][0].parent = getIndex(0);
        
        this.$ = [

                { key: newIndex(), text: "VariableDec", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
                { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]


        if($$[$0-1]) this.$ = this.$.concat($$[$0-1])
        if($$[$0]) this.$ = this.$.concat($$[$0])
            
    
break;
case 19:

            
        if($$[$0-1]) $$[$0-1][0].parent = getIndex(0);
        if($$[$0]) $$[$0][0].parent = getIndex(0);
        
        this.$ = [

                { key: newIndex(), text: "VariableDec", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
                { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]


        if($$[$0-1]) this.$ = this.$.concat($$[$0-1])
        if($$[$0]) this.$ = this.$.concat($$[$0])
            
    
break;
case 24: case 25:

            
        $$[$0-1][0].parent = getIndex(0);
        
        this.$ = [

                { key: newIndex(), text: "BodyElement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
        ].concat($$[$0-1]);

        if($$[$0] !== undefined){
            this.$ = this.$.concat({ key: newIndex(), text: ";", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)});
        };


            
    
break;
case 26:

            
        $$[$0-3][0].parent = getIndex(0);
        $$[$0-1][0].parent = getIndex(0);
        
        this.$ = [

                { key: newIndex(), text: "BodyElement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
        ]
        .concat($$[$0-3])
        .concat([{ key: newIndex(), text: "BodyElement", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)},])
        .concat($$[$0-1]);

        if($$[$0-2] !== undefined){
            this.$ = this.$.concat({ key: newIndex(), text: ";", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)});
        };


            
    
break;
case 33:

            this.$ = [
                { key: newIndex(), text: "BodyElement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: "break", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)}
            ];

            if($$[$0] !== undefined){
                this.$ = this.$.concat({ key: newIndex(), text: ";", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)});
            };


        
break;
case 34:

            this.$ = [
                { key: newIndex(), text: "BodyElement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: "return", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)}
            ];

            $$[$0-1][0].parent = getIndex(-2)
            
            this.$ = this.$.concat($$[$0-1])
            if($$[$0-1] !== undefined){
                this.$ = this.$.concat({ key: newIndex(), text: ";", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)});
            };


        
break;
case 35:

            this.$ = [
                { key: newIndex(), text: "BodyElement", fill: "#f68c06", stroke: "#4d90fe", parent : -1},
                { key: newIndex(), text: "return", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)}
            ];

            if($$[$0] !== undefined){
                this.$ = this.$.concat({ key: newIndex(), text: ";", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)});
            };


        
break;
case 36:

            this.$ = [
                { key: newIndex(), text: "BodyElement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: "continue", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)}
            ];

            if($$[$0] !== undefined){
                this.$ = this.$.concat({ key: newIndex(), text: ";", fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)});
            };


        
break;
case 37:

        
        if($$[$0-1]) $$[$0-1][0].parent = getIndex(0)
        if($$[$0-5]) $$[$0-5][0].parent = getIndex(0)
        if($$[$0-3]) $$[$0-3][0].parent = getIndex(0)
        
         this.$ = [
                { key: newIndex(), text: "BodyElement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-8], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)},
                { key: newIndex(), text: $$[$0-7], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)},
                { key: newIndex(), text: $$[$0-6], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4)},
            ]
            .concat($$[$0-5] !== undefined ? $$[$0-5] : [])
            .concat([{ key: newIndex(), text: $$[$0-4], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5)}])
            .concat($$[$0-3] !== undefined ? $$[$0-3] : [])
            .concat([{ key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6)}])
            .concat($$[$0-1] !== undefined ? $$[$0-1] : [])
            .concat([{ key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-7)}]);

    
break;
case 38: case 41:

        $$[$0-2][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "IdCall", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
           
        ].concat($$[$0-2])
        .concat([
             { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]);
    
break;
case 39: case 40:

        $$[$0-3][0].parent = getIndex(0)
        $$[$0-1][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "IdCall", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
           
        ]
        .concat($$[$0-3])
        .concat([
             { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
        ])
        .concat($$[$0-1])
        .concat([
             { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ])
        
        ;
    
break;
case 42:

        this.$ = [
            { key: newIndex(), text: "IdCall", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)},
        ];

    
break;
case 43: case 44:

        this.$ = [
            { key: newIndex(), text: "IdCall", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)},
            { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)},
        ];

    
break;
case 47:

        $$[$0-4][0].parent = getIndex(0) 
        this.$ = [ 
            { key: newIndex(), text: "IdCall", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            
            ]
            .concat($$[$0-4])
            .concat([
                { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)},
                { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)},
                { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4)},
                { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5)},
            ]);
    
break;
case 48:

        this.$ = [ 
            { key: newIndex(), text: "IdCall", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)},
            { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)},
            { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4)},
            ]
    
break;
case 49: case 50: case 52: case 53:
this.$=$$[$0-1] + $$[$0];
break;
case 51:
this.$=$$[$0];
break;
case 55:
this.$ = ''
break;
case 56:
this.$ = $$[$0-2] + '[]';
break;
case 57:
this.$ = '[]';
break;
case 64: case 65: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78:

            $$[$0-2][0].parent = getIndex(0)
            $$[$0][0].parent = getIndex(0)

            this.$ = [
                { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : -1 }
            ];

            this.$ = this.$.concat($$[$0-2]);
            this.$ = this.$.concat($$[$0]);
            

        
break;
case 66: case 83:

            $$[$0][0].parent = getIndex(0)
            this.$ = [
                { key: newIndex(), text: "Expression", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) }
            ];

            this.$ = this.$.concat($$[$0]);
            
        
break;
case 79:
this.$ = $$[$0-1];
break;
case 80:

            $$[$0-1][0].parent = getIndex(0)
            this.$ = [
                { key: newIndex(), text: "Expression", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) }
            ];

            this.$ = this.$.concat($$[$0-1]);
            this.$ = this.$.concat([{ key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) }]);
            
        
break;
case 84:

            $$[$0-2][0].parent = getIndex(0)
            $$[$0][0].parent = getIndex(0)

            this.$ = [
                { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : -1 }
            ];

            this.$ = this.$.concat($$[$0-2]);
            this.$ = this.$.concat($$[$0]);
            
    
break;
case 86:
this.$ = [{ key: newIndex(), text: '[]', fill: "#f68c06", stroke: "#4d90fe", parent : -1 }];
break;
case 87: case 88: case 89: case 90: case 91:
this.$ = [{ key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : -1 }];
break;
case 93:


        $$[$0-2][0].parent = getIndex(0)
        $$[$0][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "ExpressionList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
        ]
        .concat($$[$0-2])
        .concat([ { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },])
        .concat($$[$0]);
    
break;
case 94:


        $$[$0][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "ExpressionList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
        ].concat($$[$0]);
    
break;
case 95:

        $$[$0-3][0].parent = getIndex(0)
        $$[$0-1][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "IdAssign", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
           
        ]
        .concat($$[$0-3])
        .concat([
             { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
        ])
        .concat($$[$0-1])
        .concat([
             { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ])
        
        ;
    
break;
case 96: case 97:

        $$[$0-2][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "IdAssign", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
           
        ].concat($$[$0-2])
        .concat([
             { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]);
    
break;
case 98:

        $$[$0-3][0].parent = getIndex(0)
        $$[$0-1][0].parent = getIndex(0)

        this.$ = [
            { key: newIndex(), text: "IdAssign", fill: "#f68c06", stroke: "#4d90fe", parent : -1 }
        ];

        this.$ = this.$.concat($$[$0-3]);
        this.$ = this.$.concat({ key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)});
        this.$ = this.$.concat($$[$0-1]);
        this.$ = this.$.concat({ key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)});
    
break;
case 99:

        this.$ = [
            { key: newIndex(), text: "IdAssign", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)},
        ];

    
break;
case 100: case 101:

        this.$ = [
            { key: newIndex(), text: "IdAssign", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2)},
            { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3)},
        ];

    
break;
case 102:


        $$[$0-2][0].parent = getIndex(0)
        $$[$0][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "ParameterList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
        ]
        .concat($$[$0-2])
        .concat([ { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },])
        .concat($$[$0]);
    
break;
case 103:


        $$[$0][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "ParameterList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
        ].concat($$[$0]);
    
break;
case 104:


        $$[$0-4][0].parent = getIndex(0)
        if($$[$0-1]) $$[$0-1][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "IfStatement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-6], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0-5], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]
        .concat($$[$0-4])
        .concat([ { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4) },])
        .concat([ { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5) },])
        .concat($$[$0-1] !== undefined ? $$[$0-1] : [])
        .concat([ { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6) },])
    
break;
case 105:


        $$[$0-6][0].parent = getIndex(0)
        if($$[$0-3]) $$[$0-3][0].parent = getIndex(0)
        $$[$0][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "IfStatement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-8], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0-7], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]
        .concat($$[$0-6])
        .concat([ { key: newIndex(), text: $$[$0-5], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4) },])
        .concat([ { key: newIndex(), text: $$[$0-4], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5) },])
        .concat($$[$0-3] !== undefined ? $$[$0-3] : [])
        .concat([ { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6) },])
        .concat([ { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-7) },])
        .concat($$[$0]);
    
break;
case 106:


        $$[$0-8][0].parent = getIndex(0)
        if($$[$0-5]) $$[$0-5][0].parent = getIndex(0)
        $$[$0-2][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "IfStatement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-10], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0-9], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]
        .concat($$[$0-8])
        .concat([ { key: newIndex(), text: $$[$0-7], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4) },])
        .concat([ { key: newIndex(), text: $$[$0-6], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5) },])
        .concat($$[$0-5] !== undefined ? $$[$0-5] : [])
        .concat([ { key: newIndex(), text: $$[$0-4], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6) },])
        .concat([ { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-7) },])
        .concat([ { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-8) },])
        .concat($$[$0-1] !== undefined ? $$[$0-1] : [])
        .concat([ { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-9) },]);
    
break;
case 107:


        $$[$0-4][0].parent = getIndex(0)
        if($$[$0-1]) $$[$0-1][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "WhileStatement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-6], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0-5], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]
        .concat($$[$0-4])
        .concat([ { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4) },])
        .concat([ { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5) },])
        .concat($$[$0-1] !== undefined ? $$[$0-1] : [])
        .concat([ { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6) },])
    
break;
case 108:


        if($$[$0-6]) $$[$0-6][0].parent = getIndex(0)
        $$[$0-2][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "DoWhileStatement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-8], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0-7], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]
        .concat($$[$0-6] !== undefined ? $$[$0-6] : [])
        .concat([ { key: newIndex(), text: $$[$0-5], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4) },])
        .concat([ { key: newIndex(), text: $$[$0-4], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5) },])
        .concat([ { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6) },])
        .concat($$[$0-2])
        .concat([ { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-7) },]);

        if($$[$0]) this.$ = this.$.concat([ { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-8) },]);
        
    
break;
case 109:


        $$[$0-4][0].parent = getIndex(0)
        if($$[$0-1]) $$[$0-1][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "SwitchStatement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-6], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0-5], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
        ]
        .concat($$[$0-4])
        .concat([ { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4) },])
        .concat([ { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5) },])
        .concat($$[$0-1] !== undefined ? $$[$0-1] : [])
        .concat([ { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6) },])
    
break;
case 112: case 113:


            $$[$0-1][0].parent = getIndex(0)
            $$[$0][0].parent = getIndex(0)
            this.$ = [
                { key: newIndex(), text: "CaseList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            ]
            .concat($$[$0-1])
            .concat($$[$0]);
        
break;
case 114: case 115:


            $$[$0][0].parent = getIndex(0)
            this.$ = [
                { key: newIndex(), text: "CaseList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            ].concat($$[$0]);
        
break;
case 116:

            $$[$0-2][0].parent = getIndex(0)
            if($$[$0]) $$[$0][0].parent = getIndex(0)
            this.$ = [
                { key: newIndex(), text: "CaseList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
                
            ]
            .concat($$[$0-2])
            .concat([{ key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },])
            .concat($$[$0] !== undefined ? $$[$0] : []);
        
break;
case 117:

            if($$[$0]) $$[$0][0].parent = getIndex(0)
            this.$ = [
                { key: newIndex(), text: "CaseList", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
                { key: newIndex(), text: $$[$0-1], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
            ]
            .concat($$[$0] !== undefined ? $$[$0] : []);
        
break;
case 118:

            if($$[$0-8]) $$[$0-8][0].parent = getIndex(0)
            if($$[$0-6]) $$[$0-6][0].parent = getIndex(0)
            if($$[$0-4]) $$[$0-4][0].parent = getIndex(0)
            if($$[$0-1]) $$[$0-1][0].parent = getIndex(0)
            this.$ = [
                { key: newIndex(), text: "ForStatement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
                { key: newIndex(), text: $$[$0-10], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
                { key: newIndex(), text: $$[$0-9], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
                
            ]
            .concat($$[$0-8] !== undefined ? $$[$0-8] : [])
            .concat([{ key: newIndex(), text: $$[$0-7], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4) },])
            .concat($$[$0-6] !== undefined ? $$[$0-6] : [])
            .concat([{ key: newIndex(), text: $$[$0-6], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5) },])
            .concat($$[$0-4] !== undefined ? $$[$0-4] : [])
            .concat([{ key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6) },])
            .concat([{ key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-7) },])
            .concat($$[$0-1] !== undefined ? $$[$0-1] : [])
            .concat([{ key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-8) },]);
        
break;
case 119: case 120: case 121: case 122:


        $$[$0-4][0].parent = getIndex(0)
        if($$[$0-1]) $$[$0-1][0].parent = getIndex(0)
        this.$ = [
            { key: newIndex(), text: "ForStatement", fill: "#f68c06", stroke: "#4d90fe", parent : -1 },
            { key: newIndex(), text: $$[$0-9], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-2) },
            { key: newIndex(), text: $$[$0-8], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-3) },
            { key: newIndex(), text: $$[$0-7], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-4) },
            { key: newIndex(), text: $$[$0-6], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-5) },
            { key: newIndex(), text: $$[$0-5], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-6) },
        ]
        .concat($$[$0-4])
        .concat([ { key: newIndex(), text: $$[$0-3], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-7) },])
        .concat([ { key: newIndex(), text: $$[$0-2], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-8) },])
        .concat($$[$0-1] !== undefined ? $$[$0-1] : [])
        .concat([ { key: newIndex(), text: $$[$0], fill: "#f68c06", stroke: "#4d90fe", parent : getIndex(-9) },])
    
break;
}
},
table: [{3:1,4:2,5:[1,3],11:4,18:5,20:$V0,21:$V1,22:$V2,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{1:[3]},{5:[1,25],11:26,18:5,20:$V0,21:$V1,22:$V2,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{1:[2,2]},o($Vd,[2,12]),o($Vd,$Ve,{6:27,7:$Vf,19:$Vg}),o($Vd,$Ve,{6:30,7:$Vf,16:[1,31],38:[1,32],42:[1,33],44:[1,34]}),{20:[1,35]},o($Vd,[2,28]),o($Vd,[2,29]),o($Vd,[2,30]),o($Vd,[2,31]),o($Vd,[2,32]),o($Vd,$Ve,{6:36,7:$Vf}),{7:[1,38],17:37,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($Vd,$Ve,{6:55,7:$Vf}),{20:[1,56]},{20:[1,57]},{20:[1,58]},o($Vu,[2,42],{45:[1,59],46:[1,60]}),{38:[1,61]},{38:[1,62]},{24:[1,63]},{38:[1,64]},{38:[1,65]},{1:[2,1]},o($Vd,[2,11]),o($Vd,[2,24]),{20:[1,66]},o($Vd,[2,3]),o($Vd,[2,25]),{17:67,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:70,20:$Vh,24:$Vi,38:$Vj,40:[1,68],41:69,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:71,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:[1,72]},{16:[1,73]},o($Vd,[2,33]),o($Vd,$Ve,{6:74,7:$Vf}),o($Vd,[2,35]),o($Vv,[2,62],{57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:90,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:91,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:94,20:$Vh,24:$Vi,38:$Vj,42:$Vk,43:[1,93],45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,73:92,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:[1,95]},{20:[1,96]},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:97,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($VL,[2,85],{16:[1,98],38:[1,101],42:[1,99],44:[1,100]}),o($VL,[2,87]),o($VL,[2,88]),o($VL,[2,89]),o($VL,[2,90]),o($VL,[2,91]),o($VL,[2,92]),o($VM,[2,99],{45:[1,102],46:[1,103]}),{20:[1,106],25:[1,105],55:104},o($Vd,[2,36]),{38:[1,107]},o($VN,$VO,{12:108,13:$VP}),o($VN,$VO,{12:110,13:$VP}),o($Vu,[2,43]),o($Vu,[2,44]),{17:111,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:112,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{4:114,8:113,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{7:[2,124],18:118,21:[1,116],22:[1,117],91:115},{17:119,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($VN,$VO,{12:120,13:$VP}),o($Vd,$Ve,{6:121,7:$Vf}),o($Vu,[2,38]),{19:$VR,40:[1,122]},o($VS,[2,103]),{43:[1,124]},o($Vu,[2,41]),{23:125,24:[1,126]},o($Vd,[2,34]),{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:127,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:128,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:129,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:130,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:131,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:132,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:133,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:134,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:135,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:136,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:137,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:138,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:139,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:140,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:141,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($VL,[2,66]),{40:[1,142],57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{19:[1,144],43:[1,143]},o($VL,[2,86]),o($VT,[2,94]),o($VL,[2,81]),o($VL,[2,82]),o($VU,[2,83],{69:$VH,70:$VI,71:$VJ}),{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:145,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:146,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{20:[1,147]},{17:70,20:$Vh,24:$Vi,38:$Vj,40:[1,148],41:149,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($VM,[2,100]),o($VM,[2,101]),{19:[1,151],25:[1,150]},o($VL,[2,59]),{13:[1,152]},{20:[1,155],39:153,40:[2,46],47:154},o($VV,$VW,{15:156,16:$VX}),{14:158,20:$VY,48:$VZ,50:$V_,51:$V$,52:$V01},o($VV,$VW,{15:164,16:$VX}),{40:[1,165]},{40:[1,166]},{25:[1,167]},o($V11,[2,5],{18:5,27:6,29:8,30:9,31:10,32:11,33:12,11:26,20:$V0,21:$V1,22:$V2,28:$V3,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc}),{7:[1,168]},{20:[1,169]},{20:[1,170]},{7:[2,123],19:$Vg},{40:[1,171]},o($VV,$VW,{15:172,16:$VX}),o($Vd,[2,26]),o($Vu,[2,39]),{17:173,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($Vu,[2,40]),o($Vd,$Ve,{6:174,7:$Vf}),{20:[1,177],25:[1,175],26:176},{13:[1,178],57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o([5,7,13,19,20,21,22,25,28,34,35,36,37,40,43,57,58,79,81,82,83,88,89,90],[2,64],{59:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o([5,7,13,19,20,21,22,25,28,34,35,36,37,40,43,57,58,59,79,81,82,83,88,89,90],[2,65],{61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($V21,[2,67],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V21,[2,68],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V21,[2,69],{67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V21,[2,70],{67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V21,[2,71],{67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($V21,[2,72],{67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($VU,[2,73],{69:$VH,70:$VI,71:$VJ}),o($VU,[2,74],{69:$VH,70:$VI,71:$VJ}),o($VL,[2,75]),o($VL,[2,76]),o($VL,[2,77]),o([5,7,13,19,20,21,22,25,28,34,35,36,37,40,43,57,58,59,72,79,81,82,83,88,89,90],[2,78],{61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ}),o($VL,[2,79]),o($VL,[2,80]),{17:179,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($Vv,[2,84],{57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),{43:[1,180]},o($VM,[2,96]),o($VM,[2,97]),{19:$VR,40:[1,181]},o($VL,[2,58]),{20:[1,182]},{17:183,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{40:[1,184]},{19:[1,185],40:[2,45]},{13:[1,186]},o($VV,[2,18]),{17:187,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o([5,7,16,19,20,21,22,24,25,28,34,35,36,37,79,81,82,83,88,89,90],[2,13]),o($V31,$V41,{49:188,53:189,42:$V51}),o($V31,$V41,{53:189,49:191,42:$V51}),o($V31,[2,51]),o($V31,$V41,{53:189,49:192,42:$V51}),o($V31,$V41,{53:189,49:193,42:$V51}),o($VV,[2,19]),{24:[1,194]},{24:[1,195]},{81:[1,196]},{7:$V61,17:198,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt,92:197},o($V71,$VO,{12:108,13:$VP,93:[1,199],94:[1,200]}),o($V71,$VO,{12:110,13:$VP,93:[1,201],94:[1,202]}),{24:[1,203]},o($VV,[2,17]),o($VS,[2,102]),o($Vd,[2,27]),o($V81,[2,20]),{19:[1,205],25:[1,204]},{13:[1,206]},{20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:207,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},o($VT,[2,93]),o($VM,[2,95]),o($VM,[2,98]),{13:[1,208]},o($V91,[2,61]),{12:209,13:$VP,24:$VO},{20:[1,210]},{14:211,20:$VY,48:$VZ,50:$V_,51:$V$,52:$V01},o($VV,[2,15]),o($V31,[2,49]),o($V31,[2,54],{42:[1,212]}),{43:[1,213]},o($V31,[2,50]),o($V31,[2,52]),o($V31,[2,53]),{4:114,8:214,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{4:114,8:215,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{38:[1,216]},{7:[1,217]},o([7,40],[2,125]),{17:218,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:219,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:220,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:221,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{25:[2,111],84:222,85:223,86:224,87:225,88:$Va1,89:$Vb1},o($V81,[2,21]),{20:[1,228]},{14:229,20:$VY,48:$VZ,50:$V_,51:$V$,52:$V01},o($Vv,[2,63],{57:$Vw,58:$Vx,59:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),{17:230,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{24:[1,231]},{13:[1,232]},o($VS,[2,48]),{43:[1,233]},o($Vc1,[2,57]),{25:[1,234]},{25:[1,235]},{17:236,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{17:198,20:$Vh,24:$Vi,38:$Vj,40:$V61,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt,92:237},{40:[1,238]},{40:[1,239]},{40:[1,240]},{40:[1,241]},{25:[1,242]},{25:[2,110],86:243,87:244,88:$Va1,89:$Vb1},o($V11,[2,114]),o($V11,[2,115]),{17:245,20:$Vh,24:$Vi,38:$Vj,42:$Vk,45:$Vl,46:$Vm,48:$Vn,54:52,56:39,60:$Vo,68:$Vp,74:46,75:$Vq,76:$Vr,77:$Vs,78:$Vt},{13:[1,246]},{13:[1,247]},o($V91,[2,23]),o($V91,[2,60]),{9:248,10:249,11:250,18:5,20:$V0,21:$V1,22:$V2,25:[2,8],27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{14:251,20:$VY,48:$VZ,50:$V_,51:$V$,52:$V01},o($Vc1,[2,56]),o($Vd,[2,104],{80:[1,252]}),o($Vd,[2,107]),{40:[1,253]},{40:[1,254]},{24:[1,255]},{24:[1,256]},{24:[1,257]},{24:[1,258]},o($Vd,[2,109]),o($V11,[2,112]),o($V11,[2,113]),{13:[1,259]},o($V11,$VQ,{11:4,18:5,27:6,29:8,30:9,31:10,32:11,33:12,4:114,8:260,20:$V0,21:$V1,22:$V2,28:$V3,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc}),{14:261,20:$VY,48:$VZ,50:$V_,51:$V$,52:$V01},{25:[1,262]},{25:[2,7]},{10:263,11:250,18:5,20:$V0,21:$V1,22:$V2,25:[2,9],27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},o($VS,[2,47]),{24:[1,265],29:264,79:$V8},o($Vd,$Ve,{6:266,7:$Vf}),{24:[1,267]},{4:114,8:268,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{4:114,8:269,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{4:114,8:270,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{4:114,8:271,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},o($V11,$VQ,{11:4,18:5,27:6,29:8,30:9,31:10,32:11,33:12,4:114,8:272,20:$V0,21:$V1,22:$V2,28:$V3,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc}),o($V11,[2,117]),o($V91,[2,22]),o($Vd,[2,37]),{25:[2,10]},o($Vd,[2,105]),{4:114,8:273,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},o($Vd,[2,108]),{4:114,8:274,11:4,18:5,20:$V0,21:$V1,22:$V2,25:$VQ,27:6,28:$V3,29:8,30:9,31:10,32:11,33:12,34:$V4,35:$V5,36:$V6,37:$V7,79:$V8,81:$V9,82:$Va,83:$Vb,90:$Vc},{25:[1,275]},{25:[1,276]},{25:[1,277]},{25:[1,278]},o($V11,[2,116]),{25:[1,279]},{25:[1,280]},o($Vd,[2,119]),o($Vd,[2,121]),o($Vd,[2,120]),o($Vd,[2,122]),o($Vd,[2,106]),o($Vd,[2,118])],
defaultActions: {3:[2,2],25:[2,1],249:[2,7],263:[2,10]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var globalIndex = 0
   
newIndex = function () {
    return globalIndex++
}

getIndex = function (offset) {
    return globalIndex + offset 
}

   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:return 57;
break;
case 5:return 58;
break;
case 6:return 59;
break;
case 7:return 61;
break;
case 8:return 62;
break;
case 9:return 60;
break;
case 10:return 66;
break;
case 11:return 65;
break;
case 12:return 64;
break;
case 13:return 63;
break;
case 14:return 45;
break;
case 15:return 46;
break;
case 16:return 67;
break;
case 17:return 68;
break;
case 18:return 72;
break;
case 19:return 69;
break;
case 20:return 70;
break;
case 21:return 71;
break;
case 22:return 78
break;
case 23:return 24;
break;
case 24:return 25;
break;
case 25:return 42;
break;
case 26:return 43;
break;
case 27:return 'instanceof';
break;
case 28:return 'new';
break;
case 29:return 78;
break;
case 30:return 93;
break;
case 31:return 94;
break;
case 32:return 48;
break;
case 33:return 50;
break;
case 34:return 52;
break;
case 35:return 22;
break;
case 36:return 21;
break;
case 37:return 79;
break;
case 38:return 80;
break;
case 39:return 83;
break;
case 40:return 88;
break;
case 41:return 89;
break;
case 42:return 34;
break;
case 43:return 51;
break;
case 44:return 28;
break;
case 45:return 37;
break;
case 46:return 36;
break;
case 47:return 35;
break;
case 48:return 90;
break;
case 49:return 81;
break;
case 50:return 82
break;
case 51:return 16;
break;
case 52:return 13;
break;
case 53:return 7;
break;
case 54:return 19;
break;
case 55:return 44;
break;
case 56:return 38;
break;
case 57:return 40;
break;
case 58:return 48;
break;
case 59:/*"*/  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 77
break;
case 60:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 77
break;
case 61:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 77
break;
case 62:return 75;
break;
case 63:return 76;
break;
case 64:return 20;
break;
case 65:/* skip whitespace */
break;
case 66:throw 'Illegal character';
break;
case 67:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:null\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:instanceof\b)/,/^(?:new\b)/,/^(?:null\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:function\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:=)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:"(?:\\[\\"bfnrt/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/,/^(?:([']([^'\\\n]|\\(.|\n))*[']))/,/^(?:([`]([^'\\\n]|\\(.|\n))*[`]))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9ñÑ]*))/,/^(?:\s+)/,/^(?:\.)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = TsTranslatorGrammar;
exports.Parser = TsTranslatorGrammar.Parser;
exports.parse = function () { return TsTranslatorGrammar.parse.apply(TsTranslatorGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}